
const height = Dimensions.get("screen").height;

constructor(props){
        super(props);
        
        this.state = {
          email : '',
          password : '',
          isLogged: false,
          isFocused: true,
          keyboardState: 'closed',
          isOpen: false,
          isDisabled: false,
          swipeToClose: true,
          sliderValue: 0.3
      }
    
        this.submitHandler = this.submitHandler.bind(this);
        this.consolee = this.consolee.bind(this);
      }
      
      handleChange( name:string , value:string ) {
        console.log(name, value);
        
        this.setState(() => ({ [name]: value }));
      }
      
      handleFocus = () => {
      this.setState({isFocused: false})
      console.log(this.state.isFocused);}
  
      handleBlur = () => {this.setState({isFocused: true})
      console.log(this.state.isFocused);}
      
      handleReg = () => this.setState({wantToReg: true});

      validLogin = async ( fields:any ) => {
        if(fields.data.token) {
            this.setState({isLogged: true});
        }
      }
      showModal() {
        this.setState({isOpen: true});
        console.log(this.state.isOpen);
      }
  
      submitHandler = ( event:any ) => {
        event.preventDefault();
  
        const url = 'http://localhost:8080/api/auth/login/';
        const credentials = Base64.btoa(`${this.state.email}:${this.state.password}`)
  
        axios.post(url, this.state ,{
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Authorization": `Basic ${credentials}`
          }
          }
          )
            .then(response => {
              
              this.validLogin(response);

              this.props.navigation.navigate('Menu',{ 
                screen : 'Home', 
                params: { screen: 'Home',
                params: {credential : credentials }}, 
              });

            })
            .catch(error => {
                console.log(error);
            })
    }
    consolee = () => {
      console.log('asdasdssad');
    }
      renderRequest(){  
        return(
          <LinearGradient
            colors={['#179094','#55D3D7','#4FD8DC']}
            style={{borderRadius:30}}
            start={{ y: 1.0, x: 0.0 }} end={{ y: -1.0, x: 0.0 }}
          >
            <TouchableOpacity
            style={styles.singInButton}
            onPress={this.consolee}>
              <Text style={styles.singInText}>sing in</Text>
            </TouchableOpacity>
          </LinearGradient>
        );
    }

    UNSAFE_componentWillMount () {
      this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
      this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
    }
  
    UNSAFE_componentWillUnmount () {
      this.keyboardDidShowListener.remove();
      this.keyboardDidHideListener.remove();
    }
  
    _keyboardDidShow = () => {
      this.setState({
          keyboardState: 'opened'
      });
    }
  
    _keyboardDidHide = () => {
      this.setState({
          keyboardState: 'closed'
      });
    }

    // onClose() {
    //   console.log('Modal just closed');
    // }
  
    // onOpen() {
    //   console.log('Modal just opened');
    // }
  
    // onClosingState(state) {
    //   console.log('the open/close of the swipeToClose just changed');
    // }

    render(){
    return (
      <View style={styles.container}>
      <LinearGradient 
        colors={['#0E0922','#090516','#0E0922']}
        style = { styles.linearGradient }
        locations = {[0.1,0.5,0.9]}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 0 }}
        >
        <View style = {styles.vectorContainerTop}>
          <ImageBackground source={ require('../../assets/images/Auth/Vectorleft-top.png') } style = {styles.vectorLeftTop} >
          
          </ImageBackground>

          <Image source={ require('../../assets/images/Auth/Vector-right-top.png') } style = {styles.vectorRightTop} />
            {/* <LinearGradient locations={[0.4,1.2]}  
                    start= {{ x: 0.1, y: 0.3 }}
                    colors={['rgba(1,38,39,1.00)', 'rgba(147,244,249,1.00)']} 
                    style={styles.linearGradientVectorRT}/> */}

        </View>
        <ScrollView contentContainerStyle={styles.mainContainer}>

        <View style={styles.logoContainer}>
          <Image source={ require('../../assets/images/Unti.png') } style = {styles.logo} />
        </View> 

        <View style={[styles.loginContainer,{top: this.state.keyboardState === 'closed' ? 50 : 0}]}>
            <Text style={styles.welcomeBack}>Welcome back.</Text>
            
            <View style={styles.inputContainer}>

              <View style={styles.inputView}>
                <TextInput style={styles.textInput}
                    autoCapitalize="none"
                    autoCorrect={false}
                    placeholder="Email adress..."
                    placeholderTextColor="#000000"
                    onChangeText={(value) => this.handleChange('email', value)}
                    onFocus = {this.handleFocus}
                    onBlur = {this.handleBlur}
                  />
                <Image source={ require('../../assets/images/Auth/heroicons-solid_mail.png') } style = {styles.inputIcon} />

                </View>
              <View style={styles.inputView}>
                <TextInput style={styles.textInput}
                    secureTextEntry
                    autoCapitalize="none"
                    autoCorrect={false}
                    placeholder="Password..."
                    placeholderTextColor="#000000"
                    onChangeText={(value) => this.handleChange('password', value)}
                    onFocus = {this.handleFocus}
                    onBlur = {this.handleBlur}
                    />
                <Image source={ require('../../assets/images/Auth/ic_round-vpn-key.png') } style = {styles.inputIcon} />

              </View>
            </View>
            <View style={styles.underInputContainer}>
                  <Text style={styles.forgotPassword}>Forgot your password?</Text>
                  
                  <View style = {{ backgroundColor: 'transparent', top: 30}}>
                    {this.renderRequest()}
                  </View>
                  
                  <View style = {styles.dontHave}>
                    <Text style={styles.forgotPassword}>Don't have an account?</Text>

                    <TouchableOpacity onPress={this.consolee}>
                        <Text style={styles.regNow}>Register now</Text>
                    </TouchableOpacity>

                  </View>

            </View>
        </View>
        <Modal
          swipeToClose={this.state.swipeToClose}
          isOpen={this.state.isOpen}>
          {/* onClosed={this.onClose}
          onOpened={this.onOpen}
          onClosingState={this.onClosingState} */}
              <Text style={styles.forgotPassword}>Basic modal</Text>
        </Modal>  
        
        </ScrollView>
        <View style={ styles.vectorContainerBottom }>
              <Image source={ require('../../assets/images/Auth/Vector-left-bottom.png') } style = {styles.vectorLeftBottom} />
              <Image source={ require('../../assets/images/Auth/Vector-right-bottom.png') } style = {styles.vectorRightBottom} />
        </View>
        </LinearGradient>
      </View>
    );
    }
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

constructor(props) {
        super(props)
    
        this.state = {
          email: '',
          password: '',
          first_name: '',
          last_name: '',
          user_type: '',
          isSuccessful: false,
          token: ''
        }
    
        this.submitHandler = this.submitHandler.bind(this);
      }
    
      handleChange(name, value) {
        console.log(name, value);
    
        this.setState(() => ({ [name]: value }));
      }
    
      validSignup = (token) => {
        if (token) {
          this.setState({ isSuccessful: true });
        }
      }
    
      submitHandler = (event) => {
        event.preventDefault();
        const url = "http://192.168.1.8:8080/api/auth/register/"
        console.log(this.state)
    
        axios.post(url, this.state)
          .then(response => {
            console.log(response);
            this.validSignup(response.data.token)
            console.log(this.state.token)
            
            this.props.navigate.jumpTo('CreateProfile');
          })
          .catch(error => {
            console.log(error)
          })
      }
      renderButton() {
        const buttonText = 'Create';
    
        return (
          <Button title={buttonText} onPress={this.submitHandler} />
        );
      }
      render() {
        return (
          <View style={styles.container}>
            <View>
              <TextInput style={styles.textInput}
                autoCapitalize="none"
                autoCorrect={false}
                placeholder="email"
                onChangeText={(value) => this.handleChange('email', value)}
              />
            </View>
            <View>
            <TextInput style={styles.textInput}
                secureTextEntry
                autoCapitalize="none"
                autoCorrect={false}
                placeholder="password"
                onChangeText={(value) => this.handleChange('password', value)}
              />
              <TextInput style={styles.textInput}
                placeholder="fisrtname"
                autoCorrect={false}
                autoCapitalize="none"
                onChangeText={(value) => this.handleChange('first_name', value)}
              />
            </View>
            <View>
            <TextInput style={styles.textInput}
                autoCapitalize="none"
                autoCorrect={false}
                placeholder="lastname"
                onChangeText={(value) => this.handleChange('last_name', value)}
              />
            </View>
            <View>
            <TextInput style={styles.textInput}
                autoCapitalize="none"
                autoCorrect={false}
                placeholder="user_type"
                onChangeText={(value) => this.handleChange('user_type', value)}
              />
            </View>
            {this.renderButton()}
          </View>
    
        );
      }
      
container: {
    alignItems: 'center',
    justifyContent: 'center',
    top: 300,
    padding: 10,
  },
  textInput: {
    color: '#fff',
  },
  }



modal2: {
      height: 230,
      backgroundColor: "#3B5998",
      justifyContent: 'center',
      alignItems: 'center',
    },
    linearGradient: {
      height: Platform.OS === 'ios' ? height : height-15 ,
    },
    container: {
      height: Platform.OS === 'ios' ? height : height-15 ,
    },
    vectorContainerTop: {
      width: wp("100%"),
      backgroundColor: 'transparent',
      flexDirection: 'row',
      justifyContent: 'space-around',
    },

    vectorLeftTop:{
      width: wp("80%"),
      height: hp("17%"),
      opacity: 0.9,
      left: "50%",
      tintColor: "#29F7FB",
    },
    vectorRightTop:{
      width: "100%",
      height: "140%",
      opacity: 0.5,
      right: "50%",
      tintColor: '#19224A',
    },
    // linearGradientVectorRT:{
      //   position: 'absolute',
      //   left: 0,
      //   right: 0,
      //   top: 0,
      //   height: 'auto',
      // },
    mainContainer:{
      backgroundColor: 'transparent',
      flexGrow:1,
      top: 30,
    },
    logoContainer: {
      alignItems: 'center',
      backgroundColor: 'transparent',
    },
    logo: {
      width: wp("24%"),
      height: hp("12%"),
    },
    loginContainer: {
      alignItems: 'center',
      backgroundColor: 'transparent',
    },
    welcomeBack: {
      fontWeight: '700',
      fontStyle: 'normal',
      fontSize: 24,
    },
    inputContainer: {
      width: wp("79,7%"),
      backgroundColor: "#59C0C225",
      borderRadius: 20,
      top: 20,
      paddingVertical: 10,
    },
    inputView:{
      width: wp("70,7%"),
      alignSelf: 'center',
      alignItems: 'center',
      justifyContent: 'flex-start',
      flexDirection: 'row',
      backgroundColor: '#E5E5E5',
      marginVertical: 15,
      borderRadius: 20,
    },
    textInput:{
      width: wp("64,7%"),
      height: hp("5,6%"),
      paddingLeft: 20,
    },
    inputIcon:{
      width: wp("8,4%"),
      height: hp("3%"),
      right: 20,
    },
    underInputContainer:{
      backgroundColor: 'transparent',
      alignItems: 'center',
      top: 40,
    },
    forgotPassword:{
      fontWeight: '700',
      fontStyle: 'normal',
      fontSize: 15,
    },
    singInButton:{
      width: wp("65%"),
      textAlign: 'center',
      alignItems: 'center',
      flex:0,
      flexBasis: 10,
    },
    singInText: {
      top: 10,
      fontWeight: '700',
      fontStyle: 'normal',
      fontSize: 15,
    },  
    regNow: {
      fontWeight: '700',
      fontStyle: 'normal',
      fontSize: 15,
      color: '#1EABB2',
      paddingLeft: 10,
    },
    dontHave: {
      justifyContent: 'flex-start',
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: 'transparent',
      top: 50,
    }, 
    vectorContainerBottom:{
      width: wp("100%"),
      backgroundColor: 'transparent',
      flexDirection: 'row',
      justifyContent: 'space-around',
      position: 'relative',
      bottom: 0,
    },
    vectorLeftBottom:{
      left: 40,
      tintColor: '#19224A',
      opacity: 0.7,
    },
    vectorRightBottom:{
      right: 50,
      opacity: 0.9,
      tintColor: "#29F7FB",
    },